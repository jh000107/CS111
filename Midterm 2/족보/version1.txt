In this version, problem 1b operates on the list ['oh', 'boy']

problem 1
---------
a)  9
    12
    16
    3 16

b)  o
    ho
    bho
    obho
    yobho


problem 2
---------
5 [4, 8] [4, 8]
5 [4, 8] [3, 6]
3 [4, 8] [4, 8]


problem 3
---------
a)  x | y | output
   ---------------
    0 | 0 | 1
    0 | 1 | 1
    1 | 0 | 0
    1 | 1 | 1

b)  __   _
    xy + xy + xy

c) note: you also needed correctly shaped gates

  ---           ---
  |X|           |Y|
  ---           ---
   |             |
   o-------      o-------
   |      |      |      |
   |      v      |      v
   |    -----    |    -----
   |    |NOT|    |    |NOT|
   |    -----    |    -----
   |      |      |      |
   |      |      |      |    -------
   |      o------+------+--->| AND |
   |      |      |      |    | __  |--------
   |      |      |      |--->| xy  |       |
   |      |      |           -------       |     ------
   |      |      |                         |---->|    |
   |      |      |                               |    |       ----------
   |      |      |           -------       |---->| OR |------>| output |
   |      |------+---------->| AND |       |     |    |       ----------
   |             |           | _   |--------  |->|    |
   |             o---------->| xy  |          |  ------
   |             |           -------          |
   |             |                            |
   |             |                            |
   |             |           -------          | 
   |-------------+---------->| AND |          | 
                 |           |     |----------|
                 |---------->| xy  |
                             -------


problem 4
---------
def no_primes(vals):
    for x in vals:
        if is_prime(x) == True:
            return False
    return True


problem 5
---------
     00   read r1         # read 1st num
     01   read r2         # read 2nd num
     02   call r14 05     # call the function
     03   write r13       # write the result
     04   halt
                          # the function
     05   sub r3 r1 r2    # r3 = r1 - r2
     06   jgtz r3 09      # check if r1 > r2
     07   copy r13 r2     # if not, r2 is larger
     08   jumpn 10        # could also repeat statement 10 here
     09   copy r13 r1     # if so, r1 is larger
     10   jumpr r14       # return


problem 6
---------
def index_min_product(list1, list2):
    minpos = 0
    minproduct = list1[0] * list2[0]    # NOT 0 or any other constant!

    for i in range(len(list1)):
        if list1[i] * list2[i] < minproduct:
            minpos = i
            minproduct = list1[i] * list2[i]
            
    return minpos


problem 7
---------
a)  4
    7
    10

b)  b = 2
    b = 4
    a = 7
    b = 8


problem 8
---------
def index_nth(n, c, s):
    count = 0
    
    for i in range(len(s)):
        if s[i] == c:
            count += 1
            if count == n:
                return i

    return -1